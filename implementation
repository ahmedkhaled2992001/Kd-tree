#include<iostream>
#include <fstream>
#include <sstream>
#include <chrono>
using namespace std;

class node
{
public:
    double x, y;
    node* left, * right;
};



// Merge sort  for array "a"
void merg(double a[][2], int l, int mid, int r, int level, int dimension);
void mergesort(double arr[][2], int l, int r, int level, int dimension);




void constr(double points[][2], int l, int r, node* parent, int level)
{
    mergesort(points, l, r, level % 2, 2);


    int mid = (r + l) / 2;
    parent->x = points[mid][0];
    parent->y = points[mid][1];
    //cout<<level<<endl;
    if (r >= l)level++;
    if (l <= mid - 1)
    {
        parent->left = new node();
        constr(points, l, mid - 1, parent->left, level);
    }
    if (mid + 1 <= r)
    {
        parent->right = new node();
        constr(points, mid + 1, r, parent->right, level);

    }
}



void print(node* head);


int main()
{
    
    
    double points[210000][2] ;
   /* int counters = 0;
    for (int i = 0; i < 100000; i++)
    {
        srand((unsigned int)time(NULL));
        float a = 50;

        points[counters][0] = (float(rand()) / float((RAND_MAX)) * a);

        counters++;
    }

   
    
    int counterss = 0;

    for (int i = 0; i < 100000; i++)
    {
        srand((unsigned int)time(NULL));
        float a = 120;

        points[counterss][1] = (float(rand()) / float((RAND_MAX)) * a);

        counterss++;
    }*/

    std::fstream myfile("x.cord.txt");
    if (!myfile.is_open()) abort;

    std::string str, temp;
    int counters(-1);
    while (getline(myfile, str))
    {
        long long  start = 0, count = 0;
        while (true)
        {
            long long  end = str.find_first_of('	', start);
            if (end == std::string::npos) end = str.size();
            temp = str.substr(start, end - start);
            if (isdigit(temp[0]))
            {
                counters++;
                points[counters][0] = atof(temp.c_str());
            }
            start = end + 1;
            if (end == str.size()) break;
        }
    } // x.cord is ready
    cout << "ok" << endl;

        // obtaning data from the text file
    std::fstream myfiles("y.cord.txt");
    if (!myfiles.is_open()) abort;

    std::string strr, tempp;
    int counterss(-1);
    while (getline(myfiles, strr))
    {
        long long start = 0;
        while (true)
        {
            long long end = strr.find_first_of('	', start);
            if (end == std::string::npos) end = strr.size();
            tempp = strr.substr(start, end - start);
            if (isdigit(tempp[0]))
            {
                counterss++;
                points[counterss][1] = atof(tempp.c_str());
            }
            start = end + 1;
            if (end == strr.size()) break;
        }
    } // y.cord is ready


    cout << "oky" << endl;
    auto start = chrono::steady_clock::now();

   /* node* head = new node();
    constr(points, 0, 200000-1, head, 0);*/
    cout << "okc" << endl;
    // get the end time 
    auto end = chrono::steady_clock::now();

    //find the difference
    double elapsed_time_ns = double(std::chrono::duration_cast <std::chrono::nanoseconds> (end - start).count());

    // output
    cout << "elapsed time(s): " << elapsed_time_ns / 1e9 << endl;

    //print(head);
}


void print(node* head)
{
    if (head == NULL)return;
    cout << head->x << "  " << head->y << endl;
    print(head->left);

    print(head->right);

}




// Merge two subarrays Left and right into array "a"
void merg(double a[][2], int l, int mid, int r, int level, int dimension)
{
    int n1 = mid - l + 1, n2 = r - mid;

    // Create Left ← a[l..mid] and right ← a[mid+1..r]
    double** left = new double* [n1],
        ** right = new double* [n2];
    for (long long i = 0; i < n1; i++)
        left[i] = new double[dimension];
    for (int i = 0; i < n2; i++)
        right[i] = new double[dimension];

    for  (long long i = 0; i < n1; i++)
        for (int j = 0; j < dimension; j++)
            left[i][j] = a[l + i][j];

    for (long long i = 0; i < n2; i++)
        for (int j = 0; j < dimension; j++)
            right[i][j] = a[mid + 1 + i][j];

    // Maintain current index of sub-arrays and main array
    int i = 0, k = l, j = 0;
    // Until we reach either end of either Left or right , pick larger among
      // elements Left and right and place them in the correct position at A[l..r]
    while (i < n1 && j < n2)
    {
        if (left[i][level] <= right[j][level])
        {
            for (int ite = 0; ite < dimension; ite++)
                a[k][ite] = left[i][ite];
            i++;
        }
        else
        {
            for (int ite = 0; ite < dimension; ite++)
                a[k][ite] = right[j][ite];
            j++;
        }
        k++;
    }

    // When we run out of elements in either Left or right,
      // pick up the remaining elements and put in A[l..r]
    while (i < n1)
    {
        for (int ite = 0; ite < dimension; ite++)
            a[k][ite] = left[i][ite];
        i++;
        k++;
    }

    while (j < n2) {
        for (int ite = 0; ite < dimension; ite++)
            a[k][ite] = right[j][ite];
        j++;
        k++;
    }



    //demolish the temporary containers left and right
    for (long long i = 0; i < n1; i++)
        delete left[i];
    delete[] left;
    for (long long i = 0; i < n2; i++)
        delete right[i];
    delete right;

}



// Divide the array into two subarrays, sort them and merge them
void mergesort(double arr[][2], int l, int r, int level, int dimension)
{
    if (l < r)
    {
        // mid is the point where the array is divided into two subarrays
        int mid = l + (r - l) / 2;
        mergesort(arr, l, mid, level, dimension);
        mergesort(arr, mid + 1, r, level, dimension);
        // Merge the sorted subarrays
        merg(arr, l, mid, r, level, dimension);

    }

}
